---
name: "Pipeline: Commit + Test"

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.adoc'
      - '**.md'
      - 'docs/**'
      - '.devcontainer/**'
      - '.github/workflows/dev-environment.yml'
      - '.vscode/**'
      - '.gitkeep'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
    paths-ignore:
      - '**.adoc'
      - '**.md'
      - 'docs/**'
      - '.devcontainer/**'
      - '.github/workflows/dev-environment.yml'
      - '.vscode/**'
      - '.gitkeep'
  schedule:
    - cron: '0 1 * * 2'

env:
  IMAGE_TAG_RC: rc
  IMAGE_TAG_LATEST: latest
  REGISTRY: docker.io

permissions:
  contents: read

jobs:

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          ignore_paths: node_modules target

  lint:
    runs-on: ubuntu-latest
    name: ${{ matrix.linter }}
    strategy:
      matrix:
        linter: ['yaml', 'workflows', 'filenames', 'folders', 'markdown-links']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Run lint-${{ matrix.linter }} from docker-compose.yml
        run: docker compose up lint-${{ matrix.linter }} --exit-code-from lint-${{ matrix.linter }}
        shell: bash

  check-inspec-profile:
    runs-on: ubuntu-latest
    name: ${{ matrix.profile }}
    strategy:
      matrix:
        profile: ['devcontainer', 'ftp-client']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Task
        uses: arduino/setup-task@v2.0.0
        with:
          version: 3.x
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Validate Inspec profile
        run: task inspec:check:${{ matrix.profile }}
        shell: bash

  lint-dockerfiles:
    runs-on: ubuntu-latest
    name: ${{ matrix.image-name }}
    strategy:
      matrix:
        image-name: ['devcontainer', 'folderslint', 'ftp-client', 'mkdocs']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Run ${{ matrix.image-name }}-lint-dockerfile from docker-compose.yml
        run: docker compose up ${{ matrix.image-name }}-lint-dockerfile --exit-code-from ${{ matrix.image-name }}-lint-dockerfile
        shell: bash

  # ----- Build Docs stage ------------------------------------------------------------------------

  generate-docs:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: lint
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{github.ref}}
      - name: Copy files from docs to project root
        run: |
          cp docs/index.md README.md
          cp docs/license.md LICENSE.md
        shell: bash
      - name: Download files from .github repository to project root
        run: |
          curl -o CODE_OF_CONDUCT.md https://raw.githubusercontent.com/sommerfeld-io/.github/main/docs/code-of-conduct.md
          curl -o CONTRIBUTING.md https://raw.githubusercontent.com/sommerfeld-io/.github/main/docs/contribute.md
          curl -o SECURITY.md https://raw.githubusercontent.com/sommerfeld-io/.github/main/docs/security.md
          chmod u+rw,g+rw,o+r ./*.md
        shell: bash
      - name: Add do-not-edit remark to Markdown files in project root
        run: |
          for file in *.md; do
            {
              echo
              echo "<!-- !    DO NOT EDIT DIRECTLY !!!!!                         -->"
              echo "<!-- !    File is auto-generated by pipeline                 -->"
              echo "<!-- !    Contents are based on files from docs/about dir    -->"
            } >> "$file"
          done
        shell: bash
      - name: Replace links in Markdown files in project root
        run: |
          for file in *.md; do
            content=$(cat "$file")

            old="(usage/index.md)"
            new="(https://sommerfeld-io.github.io/container-images/usage)"
            content="${content//$old/$new}"

            old="(development-guide.md)"
            new="(https://sommerfeld-io.github.io/container-images/about/development-guide)"
            content="${content//$old/$new}"

            echo "$content" > "$file"
          done
        shell: bash
      - name: Copy images README.md files to docs and add do-not-edit remark
        run: |
          IMAGES=(
            "devcontainer"
            "folderslint"
            "ftp-client"
            "mkdocs"
          )
          for img in "${IMAGES[@]}"; do
            readme="components/${img}/README.md"
            target_md="docs/images/${img}.md"

            echo "COPY ${readme} TO ${target_md}"
            cp "${readme}" "${target_md}"

            {
              echo
              echo "<!-- !    DO NOT EDIT DIRECTLY !!!!!                                          -->"
              echo "<!-- !    File is auto-generated by pipeline                                   ->"
              echo "<!-- !    Contents are based on README files in components/<THE_IMAGE> dir    -->"
            } >> "${target_md}"

            chmod u+rw,g+rw,o+r "${target_md}"
          done
        shell: bash
      - name: Commit and push
        uses: EndBug/add-and-commit@v9.1.4
        with:
          author_name: sebastian
          author_email: sebastian@sommerfeld.io
          message: 'docs: [Actions Bot] generate docs'

  # ----- Build images stage ----------------------------------------------------------------------

  build-images:
    runs-on: ubuntu-latest
    name: ${{ matrix.image-name }}:${{ github.sha }}
    needs: [
      'lint',
      'lint-dockerfiles',
      'check-inspec-profile',
      'shellcheck',
    ]
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    strategy:
      matrix:
        image-name: ['devcontainer', 'folderslint', 'ftp-client', 'mkdocs']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: components/${{ matrix.image-name }}/Dockerfile
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.title=${{ matrix.image-name }}
            org.opencontainers.image.description=${{ matrix.image-name }}
            org.opencontainers.image.vendor=sommerfeld-io
            org.opencontainers.image.documentation=https://sommerfeld-io.github.io/container-images/images/${{ matrix.image-name }}
            dev.containers.source=https://github.com/sommerfeld-io/container-images
            dev.containers.release=${{ github.sha }}
            org.opencontainers.image.licenses=MIT
      - name: Build the Docker image and push to registry
        uses: docker/build-push-action@v6
        with:
          context: components/${{ matrix.image-name }}
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: true
          sbom: true

  docker-scout:
    runs-on: ubuntu-latest
    name: ${{ matrix.image-name }}:${{ github.sha }}
    needs: [
      'build-images',
    ]
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    strategy:
      matrix:
        image-name: ['devcontainer', 'folderslint', 'ftp-client', 'mkdocs']
    steps:
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # - name: Docker Scout CVEs for `:${{ github.sha }}` (main branch only)
      #   if: ${{ github.ref == 'refs/heads/main' }}
      #   uses: docker/scout-action@v1.18.0
      #   with:
      #     command: cves
      #     image: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ github.sha }}
      #     exit-code: false
      #     write-comment: true
      #     only-severities: critical,high
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker Scout Compare with `:latest` vs `:${{ github.sha }}` (pull requests only)
        # if: ${{ github.event_name == 'pull_request' }}
        uses: docker/scout-action@v1.18.0
        with:
          command: cves,compare
          image: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ github.sha }}
          to: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:latest
          exit-code: false
          write-comment: true
          only-severities: critical,high,medium
          github-token: ${{ secrets.GITHUB_TOKEN }}

  inspec-images:
    runs-on: ubuntu-latest
    name: ${{ matrix.image-name }}:${{ github.sha }}
    needs: [
      'build-images',
    ]
    permissions:
      contents: read
    strategy:
      matrix:
        image-name: ['devcontainer', 'ftp-client']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Task
        uses: arduino/setup-task@v2.0.0
        with:
          version: 3.x
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Exec inspec profile
        # TODO: do not repeat yourself - logic is already in taskfile.yml but taskfile.yml uses local/<image>:dev
        run: |
          readonly SYSTEM_UNDER_TEST="${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ github.sha }}"
          readonly INSPEC_DIR="tests/inspec"

          docker run --name "sut-${{ matrix.image-name }}" -d -v "$(pwd):$(pwd):ro" -w "$(pwd)" "$SYSTEM_UNDER_TEST" sleep 180s
          sleep 5
          docker compose run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$(pwd):$(pwd)" -w "$(pwd)" inspec exec "$INSPEC_DIR/${{ matrix.image-name }}" --target "docker://sut-${{ matrix.image-name }}" --no-distinct-exit --chef-license=accept
          sleep 5
          docker stop "sut-${{ matrix.image-name }}"
          docker rm "sut-${{ matrix.image-name }}"
        shell: bash

  # ----- Deploy ----------------------------------------------------------------------

  publish-rc:
    runs-on: ubuntu-latest
    name: ${{ matrix.image-name }}:${{ github.sha }}
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [
      'inspec-images',
    ]
    permissions:
      contents: read
    strategy:
      matrix:
        image-name: ['devcontainer', 'folderslint', 'ftp-client', 'mkdocs']
    steps:
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Re-tag ${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }} as release candicate (:${{ env.IMAGE_TAG_RC }}) and deploy to ${{ env.REGISTRY }}
        run: |
          SRC_IMAGE="${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ github.sha }}"
          TARGET_IMAGE="${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_RC }}"
          docker buildx imagetools create --tag "$TARGET_IMAGE" "$SRC_IMAGE"
        shell: bash

  # ----- Release stage ---------------------------------------------------------------------------

  release-code:
    runs-on: ubuntu-latest
    needs: [
      'publish-rc',
      'generate-docs',
      'check-inspec-profile',
    ]
    if: ${{ github.ref == 'refs/heads/main' }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{github.ref}}
      - name: Info - package.json
        run: cat package.json
        shell: bash
      - name: Install Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: 22.2.0
      - name: semantic-release - Install
        run: |
          npm install --save-dev semantic-release
          npm install --save-dev @semantic-release/commit-analyzer
          npm install --save-dev @semantic-release/release-notes-generator
          npm install --save-dev @semantic-release/npm
          npm install --save-dev @semantic-release/exec
          npm install --save-dev @semantic-release/git
          npm install --save-dev @semantic-release/github
        shell: bash
      - name: semantic-release - Run
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_REPO_AND_PROJECT }}
        run: npx semantic-release
        shell: bash
      - name: Info - package.json
        run: cat package.json
        shell: bash
      - name: Get the latest git tag (freshly created by semantic-release)
        id: get-version
        run: |
          # Get the latest tag and strip the 'v' prefix if present
          VERSION="$(git describe --tags --abbrev=0 | sed 's/^v//')"
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"
        shell: bash
      - name: Get the latest git tag (freshly created by semantic-release)
        run: echo "freshly created tag ${{ steps.get-version.outputs.VERSION }}"
        shell: bash
      - name: Commit and push
        uses: EndBug/add-and-commit@v9.1.4
        with:
          author_name: sebastian
          author_email: sebastian@sommerfeld.io
          message: "refactor(release): bump version to ${{ steps.get-version.outputs.VERSION }} [Actions Bot]"

  # ----- Cleanup -------------------------------

  cleanup-dockerhub:
    name: ${{ matrix.image-name }}:${{ github.sha }}
    runs-on: ubuntu-latest
    needs: ['publish-rc']
    if: always()
    permissions:
      contents: read
    strategy:
      matrix:
        image-name: ['devcontainer', 'folderslint', 'ftp-client', 'mkdocs']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Remove ${{ matrix.image-name }}:${{ github.sha }} images from registry
        run: |
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ secrets.DOCKERHUB_USER }}'", "password": "'${{ secrets.DOCKERHUB_TOKEN }}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          curl -X DELETE -H "Authorization: JWT ${TOKEN}" https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}/tags/${{ github.sha }}/
        shell: bash
