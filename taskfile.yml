---
version: '3.42.1'

dotenv: ['.env']

vars:
  INSPEC_DIR: tests/inspec

tasks:

  cleanup:
    desc: 'Cleanup the environment'
    cmds:
      - docker compose down --remove-orphans
      - rm -rf .cache
      - rm -rf node_modules
      - rm -rf target
      - for: &inspec-profiles ['devcontainer', 'ftp-client']
        cmd: |
          sudo rm -rf tests/inspec/{{ .ITEM }}/vendor
          sudo rm -rf tests/inspec/{{ .ITEM }}/inspec.lock

  # ===============================================================================================

  lint:
    desc: 'Run all project linters outside of Dockerfile linters'
    cmds:
      - for: ['yaml', 'workflows', 'filenames', 'folders', 'markdown-links']
        cmd: docker compose up lint-{{ .ITEM }} --exit-code-from lint-{{ .ITEM }}

  inspec:check:
    desc: 'Vendor and check InSpec profile validity'
    cmds:
      - for: *inspec-profiles
        task: inspec:check:{{ .ITEM }}

  inspec:check:*:
    desc: 'Vendor and check InSpec profile validity'
    vars:
      PROFILE: '{{ index .MATCH 0 }}'
    cmds:
      - rm -f "{{ .INSPEC_DIR }}/{{ .PROFILE }}/inspec.lock"
      - docker compose run --rm inspec vendor "{{ .INSPEC_DIR }}/{{ .PROFILE }}" --overwrite --chef-license=accept
      - docker compose run --rm inspec check "{{ .INSPEC_DIR }}/{{ .PROFILE }}" --chef-license=accept

  # ===============================================================================================

  docs:generate:internal:copy:
    desc: 'Do the actual work of copying files'
    internal: true
    silent: true
    cmds:
      - cp {{ .SRC }} {{ .DEST }}
      - echo >> {{ .DEST }}
      - echo "<!-- !    File is auto-generated        -->" >> {{ .DEST }}
      - echo "<!-- !    EDITS WILL BE ERASED !!!!!    -->" >> {{ .DEST }}
      - chmod u+rw,g+rw,o+r {{ .DEST }}
    generates:
      - "{{ .DEST }}"

  docs:generate:internal:download:
    desc: 'Download code guideline pipelines markdown from central repo'
    internal: true
    silent: true
    cmds:
      - curl -fsSL -o {{ .DEST }} "{{ .URL }}"
    generates:
      - "{{ .DEST }}"

  docs:generate:
    desc: 'Generate Markdown files for documentation'
    cmds:
      - echo "Collecting documentation from other Markdown files ..."
      - task: docs:generate:internal:copy
        vars: { SRC: docs/index.md, DEST: README.md }
      - task: docs:generate:internal:copy
        vars: { SRC: docs/license.md, DEST: LICENSE.md }
      - for: &images ['devcontainer', 'folderslint', 'ftp-client', 'mkdocs']
        task: docs:generate:internal:copy
        vars: { SRC: "components/{{ .ITEM }}/README.md", DEST: "docs/images/{{ .ITEM }}.md" }
      - task: docs:generate:internal:download
        vars: { URL: https://raw.githubusercontent.com/sommerfeld-io/.github/refs/heads/main/docs/code-guideline-pipelines.md, DEST: .github/instructions/code-guideline-pipelines.md }

  docs:run:
    desc: 'Run the documentation server'
    cmds:
      - docker compose up docs-dev-server

  # ===============================================================================================

  build:
    desc: 'Lint and build all container images'
    cmds:
      - for: *images
        task: build:{{ .ITEM }}

  build:*:
    desc: 'Lint and build container image | Replace * with image name'
    vars:
      IMAGE: '{{ index .MATCH 0 }}'
    cmds:
      - docker compose up {{ .IMAGE }}-lint-dockerfile --exit-code-from {{ .IMAGE }}-lint-dockerfile
      - docker compose build {{ .IMAGE }}

  # ===============================================================================================

  test:
    desc: 'Test all container images'
    cmds:
      - for: *inspec-profiles
        task: test:{{ .ITEM }}

  test:*:
    desc: 'Test container image | Replace * with image name'
    vars:
      IMAGE: '{{ index .MATCH 0 }}'
    cmds:
      - docker run --name "system-under-test-{{ .IMAGE }}" -d -v "$(pwd):$(pwd):ro" -w "$(pwd)" "local/{{ .IMAGE }}:dev" sleep 180s
      - sleep 5
      - docker compose run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "$(pwd):$(pwd)" -w "$(pwd)" inspec exec "{{ .INSPEC_DIR }}/{{ .IMAGE }}" --target "docker://system-under-test-{{ .IMAGE }}" --no-distinct-exit --chef-license=accept
      - sleep 5
      - docker stop "system-under-test-{{ .IMAGE }}"
      - docker rm "system-under-test-{{ .IMAGE }}"
